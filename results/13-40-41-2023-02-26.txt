Output:
-------
token                         lexeme
------------------------------------
keyword                          int
identifier                      test
operator                           =
integer                            0
separator                          ;
keyword                          int
identifier                     test2
separator                          ;
keyword                          int
identifier                     test3
separator                          ;
keyword                          int
identifier                     test4
separator                          ;
keyword                          int
identifier                      main
separator                          (
separator                          )
separator                          {
keyword                           if
separator                          (
identifier                      test
operator                          ==
integer                            0
separator                          )
separator                          {
separator                          }
keyword                          get
separator                          (
identifier                      test
separator                          )
separator                          ;
keyword                          put
separator                          (
identifier                      test
separator                          )
separator                          ;
separator                          }
separator                          #
separator                          #
separator                          ;
invalid                            [
separator                          }
separator                          {
invalid                            ]
keyword                        while
separator                          (
identifier                      test
operator                          ==
integer                            0
separator                          )
separator                          {
keyword                           if
separator                          (
identifier                      test
operator                          <=
integer                            0
separator                          )
separator                          {
identifier                      test
operator                           =
integer                            1
separator                          ;
separator                          }
keyword                         else
keyword                           if
separator                          (
identifier                      test
integer                            0
separator                          )
separator                          {
identifier                      test
operator                           =
operator                           -
integer                            1
separator                          ;
separator                          }
identifier                       end
keyword                           if
separator                          }
identifier                      test
operator                           =
identifier                      test
operator                           *
identifier                      test
separator                          ;
identifier                     test2
operator                           =
identifier                      test
operator                           /
identifier                      test
separator                          ;
identifier                     test3
operator                           =
identifier                     test2
operator                           +
identifier                      test
separator                          ;
identifier                     test4
operator                           =
identifier                     test3
operator                           -
identifier                      test
separator                          ;
keyword                           fi
separator                          ,
keyword                       return
integer                            0
separator                          ;
separator                          }
