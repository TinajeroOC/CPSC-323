Output:
-------
token                         lexeme
------------------------------------
keyword                     function
identifier                   testFor
separator                          (
identifier                     valid
keyword                          int
separator                          )
separator                          {
identifier                       for
separator                          (
keyword                          int
identifier                         i
operator                           =
integer                            0
separator                          ;
identifier                         i
operator                           <
integer                            5
separator                          ;
identifier                         i
operator                           +
operator                           +
separator                          )
separator                          {
identifier                      test
operator                           =
identifier                      test
operator                           +
integer                            1
separator                          ;
separator                          }
separator                          }
------------------------------------
Token: keyword Lexeme: function
<Rat23S> ::= <Opt Function Definitions> # <Opt Declaration List> # <Statement List>
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
<Function Definitions> ::= <Function> <Function'>
<Function> ::= function <Identifier>(<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier Lexeme: testFor
Token: separator Lexeme: (
Token: identifier Lexeme: valid
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Parameter List> ::= <Parameter> <Parameter'>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: keyword Lexeme: int
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
<Qualifier> ::= int | bool | real
Token: separator Lexeme: )
<Parameter'> ::= <Empty> | , <Parameter List>
<Empty> ::= <Empty>
Token: separator Lexeme: {
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Empty> ::= <Empty>
<Body> ::= { <Statement List> }
Token: identifier Lexeme: for
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: separator Lexeme: (
Syntax error: Line 3: Expected '=' but got '('.
