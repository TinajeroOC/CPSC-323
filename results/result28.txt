Output:
-------
token                         lexeme
------------------------------------
keyword                     function
identifier                 testWhile
separator                          (
identifier                     valid
keyword                          int
separator                          ,
identifier                    valid1
keyword                         real
separator                          ,
identifier                    valid2
keyword                         bool
separator                          )
separator                          {
keyword                        while
separator                          (
identifier                      test
operator                           >
integer                            0
separator                          )
separator                          {
identifier                      test
operator                           =
identifier                      test
operator                           -
integer                            1
separator                          ;
separator                          }
keyword                     endwhile
separator                          }
keyword                     function
identifier                   getReal
separator                          (
identifier                  testReal
keyword                         real
separator                          )
separator                          {
keyword                          get
separator                          (
identifier                  testReal
separator                          )
separator                          ;
separator                          }
keyword                     function
identifier            testParameters
separator                          (
separator                          )
separator                          {
keyword                       return
separator                          ;
separator                          }
separator                          #
keyword                          int
identifier                      test
separator                          ;
keyword                         bool
identifier                     test1
separator                          ;
keyword                         real
identifier                     test2
separator                          ;
keyword                         real
identifier                     test3
separator                          ;
separator                          #
identifier                      test
operator                           =
integer                            5
separator                          ;
identifier                     test1
operator                           =
keyword                        false
separator                          ;
identifier                     test2
operator                           =
real                          1.2345
separator                          ;
identifier                      test
operator                           =
identifier                      test
operator                           +
identifier                      test
separator                          ;
identifier                     test1
operator                           =
identifier                      test
operator                           -
identifier                      test
separator                          ;
identifier                     test2
operator                           =
identifier                     test2
operator                           /
integer                            5
separator                          ;
identifier                      test
operator                           =
identifier                     test1
operator                           *
identifier                     test2
separator                          ;
------------------------------------
Token: keyword Lexeme: function
<Rat23S> ::= <Opt Function Definitions> # <Opt Declaration List> # <Statement List>
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
<Function Definitions> ::= <Function> <Function'>
<Function> ::= function <Identifier>(<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier Lexeme: testWhile
Token: separator Lexeme: (
Token: identifier Lexeme: valid
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Parameter List> ::= <Parameter> <Parameter'>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: keyword Lexeme: int
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
<Qualifier> ::= int | bool | real
Token: separator Lexeme: ,
<Parameter'> ::= <Empty> | , <Parameter List>
Token: identifier Lexeme: valid1
<Parameter List> ::= <Parameter> <Parameter'>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: keyword Lexeme: real
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
<Qualifier> ::= int | bool | real
Token: separator Lexeme: ,
<Parameter'> ::= <Empty> | , <Parameter List>
Token: identifier Lexeme: valid2
<Parameter List> ::= <Parameter> <Parameter'>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: keyword Lexeme: bool
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
<Qualifier> ::= int | bool | real
Token: separator Lexeme: )
<Parameter'> ::= <Empty> | , <Parameter List>
<Empty> ::= <Empty>
Token: separator Lexeme: {
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Empty> ::= <Empty>
<Body> ::= { <Statement List> }
Token: keyword Lexeme: while
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<While> ::= while ( <Condition> ) <Statement> endwhile
Token: separator Lexeme: (
Token: identifier Lexeme: test
<Condition> ::= <Expression> <Relop> <Expression>
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: >
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
<Relop> ::= == | != | > | < | <= | =>
Token: integer Lexeme: 0
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: )
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: separator Lexeme: {
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> ::= { <Statement List> }
Token: identifier Lexeme: test
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: identifier Lexeme: test
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: -
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: integer Lexeme: 1
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: separator Lexeme: }
<Statement'> ::= <Empty> | <Statement List>
<Empty> ::= <Empty>
Token: keyword Lexeme: endwhile
Token: separator Lexeme: }
<Statement'> ::= <Empty> | <Statement List>
<Empty> ::= <Empty>
Token: keyword Lexeme: function
<Function'> ::= <Empty> | <Function Definitions>
<Function Definitions> ::= <Function> <Function'>
<Function> ::= function <Identifier>(<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier Lexeme: getReal
Token: separator Lexeme: (
Token: identifier Lexeme: testReal
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Parameter List> ::= <Parameter> <Parameter'>
<Parameter> ::= <IDs> <Qualifier>
<IDs> ::= <Identifier> <IDs'>
Token: keyword Lexeme: real
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
<Qualifier> ::= int | bool | real
Token: separator Lexeme: )
<Parameter'> ::= <Empty> | , <Parameter List>
<Empty> ::= <Empty>
Token: separator Lexeme: {
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Empty> ::= <Empty>
<Body> ::= { <Statement List> }
Token: keyword Lexeme: get
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> ::= get ( <IDs> ) ;
Token: separator Lexeme: (
Token: identifier Lexeme: testReal
<IDs> ::= <Identifier> <IDs'>
Token: separator Lexeme: )
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
Token: separator Lexeme: ;
Token: separator Lexeme: }
<Statement'> ::= <Empty> | <Statement List>
<Empty> ::= <Empty>
Token: keyword Lexeme: function
<Function'> ::= <Empty> | <Function Definitions>
<Function Definitions> ::= <Function> <Function'>
<Function> ::= function <Identifier>(<Opt Parameter List>) <Opt Declaration List> <Body>
Token: identifier Lexeme: testParameters
Token: separator Lexeme: (
Token: separator Lexeme: )
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Empty> ::= <Empty>
Token: separator Lexeme: {
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Empty> ::= <Empty>
<Body> ::= { <Statement List> }
Token: keyword Lexeme: return
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Return> ::= return <Return'>
Token: separator Lexeme: ;
<Return'> ::= ; | <Expression> ;
Token: separator Lexeme: }
<Statement'> ::= <Empty> | <Statement List>
<Empty> ::= <Empty>
Token: separator Lexeme: #
<Function'> ::= <Empty> | <Function Definitions>
<Empty> ::= <Empty>
Token: keyword Lexeme: int
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Declaration List> ::= <Declaration> | <Declaration'>
<Declaration> ::= <Qualifier> <IDs>;
<Qualifier> ::= int | bool | real
Token: identifier Lexeme: test
<IDs> ::= <Identifier> <IDs'>
Token: separator Lexeme: ;
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
Token: keyword Lexeme: bool
<Declaration'> ::= <Empty> | <Declaration List>
<Declaration List> ::= <Declaration> | <Declaration'>
<Declaration> ::= <Qualifier> <IDs>;
<Qualifier> ::= int | bool | real
Token: identifier Lexeme: test1
<IDs> ::= <Identifier> <IDs'>
Token: separator Lexeme: ;
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
Token: keyword Lexeme: real
<Declaration'> ::= <Empty> | <Declaration List>
<Declaration List> ::= <Declaration> | <Declaration'>
<Declaration> ::= <Qualifier> <IDs>;
<Qualifier> ::= int | bool | real
Token: identifier Lexeme: test2
<IDs> ::= <Identifier> <IDs'>
Token: separator Lexeme: ;
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
Token: keyword Lexeme: real
<Declaration'> ::= <Empty> | <Declaration List>
<Declaration List> ::= <Declaration> | <Declaration'>
<Declaration> ::= <Qualifier> <IDs>;
<Qualifier> ::= int | bool | real
Token: identifier Lexeme: test3
<IDs> ::= <Identifier> <IDs'>
Token: separator Lexeme: ;
<IDs'> ::= <Empty> | , <IDs>
<Empty> ::= <Empty>
Token: separator Lexeme: #
<Declaration'> ::= <Empty> | <Declaration List>
<Empty> ::= <Empty>
Token: identifier Lexeme: test
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: integer Lexeme: 5
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test1
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: keyword Lexeme: false
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test2
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: real Lexeme: 1.2345
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: identifier Lexeme: test
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: +
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: identifier Lexeme: test
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test1
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: identifier Lexeme: test
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: -
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: identifier Lexeme: test
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test2
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: identifier Lexeme: test2
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: /
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: integer Lexeme: 5
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
Token: identifier Lexeme: test
<Statement'> ::= <Empty> | <Statement List>
<Statement List> ::= <Statement> <Statement'>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: operator Lexeme: =
Token: identifier Lexeme: test1
<Expression> ::= <Term> <Expression'>
<Term> ::= <Factor> <Term'>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: operator Lexeme: *
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: identifier Lexeme: test2
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: separator Lexeme: ;
<Term'> ::= * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
<Empty> ::= <Empty>
<Expression'> ::= + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
<Empty> ::= <Empty>
<Statement'> ::= <Empty> | <Statement List>
<Empty> ::= <Empty>
